#!/bin/bash 
set -euo pipefail

source ../config/dap.config
source ../config/$PLATFORM.config
source ../config/utils.sh

main() {
  check_dependencies
  login_as $CLUSTER_ADMIN_USERNAME
  ./stop
  init_follower_authn
  verify_k8s_api_access
  configure_rbac

  login_as $FOLLOWER_ADMIN_USERNAME
  prepare_docker_images
  deploy_conjur_followers
}

###########################
# Login with username parameter if in OpenShift
#
login_as() {
  local user=$1
  if [[ "$PLATFORM" == "openshift" ]]; then
    oc login -u $user
  fi
}

###########################
# Verifies critical environment variables have values
#
check_dependencies() {
  check_env_var "CONJUR_APPLIANCE_IMAGE"
  check_env_var "CONJUR_NAMESPACE_NAME"
  check_env_var "AUTHENTICATOR_ID"
  check_env_var "DOCKER_REGISTRY_URL"
}

###################################
# Creates project, service account, clusterrole
#
apply_manifest() {
  echo "Applying Follower authn-k8s manifest..."

  sed -e "s#{{ CONJUR_NAMESPACE_NAME }}#$CONJUR_NAMESPACE_NAME#g" \
     ./manifests/templates/conjur-follower-authn.template.yaml  |
     sed -e "s#{{ CONJUR_SERVICEACCOUNT_NAME }}#$CONJUR_SERVICEACCOUNT_NAME#g" \
     > ./manifests/conjur-follower-authn-$CONJUR_NAMESPACE_NAME.yaml

  $CLI apply -f ./manifests/conjur-follower-authn-$CONJUR_NAMESPACE_NAME.yaml -n $CONJUR_NAMESPACE_NAME

  echo "Manifest applied."
}

###########################
# Initializes authentication structure for Followers to Master
#  including: namespace, config map, cluster role, cluster role binding, 
init_follower_authn() {
  announce "Initializing Follower authentication."
  initialize_conjur_config_map
  apply_manifest
  initialize_variables
}

###################################
# Validates access to K8s API with service account credentials.
#
verify_k8s_api_access() {
  echo "Verifying service account access to K8s API..."
  # Use a cap-D for decoding on Macs
  if [[ "$(uname -s)" == "Linux" ]]; then
    BASE64D="base64 -d"
  else
    BASE64D="base64 -D"
  fi

  TOKEN_SECRET_NAME="$($CLI get secrets -n $CONJUR_NAMESPACE_NAME \
    | grep "${CONJUR_SERVICEACCOUNT_NAME}.*service-account-token" \
    | head -n1 \
    | awk '{print $1}')"
  CERT="$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r '.data["ca.crt"]' \
      | $BASE64D)"
  TOKEN="$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r .data.token \
      | $BASE64D)"
  API="$($CLI config view --minify -o yaml | grep server | awk '{print $2}')"

  echo "$CERT" > k8s.crt
  if [[ "$(curl -s --cacert k8s.crt --header "Authorization: Bearer ${TOKEN}" $API/healthz)" == "ok" ]]; then
    echo "Service account access to K8s API verified."
  else
    echo
    echo ">>> Service account access to K8s API NOT verified. <<<"
    echo
    exit -1
  fi
  rm k8s.crt
}

###################################
#
configure_rbac() {
  if [[ "$PLATFORM" != "openshift" ]]; then
    return
  fi

  echo "Configuring OpenShift admin permissions."
  oc adm policy add-scc-to-user anyuid "system:serviceaccount:$CONJUR_NAMESPACE_NAME:$CONJUR_SERVICEACCOUNT_NAME"

  # add permissions for Follower admin user on registry, default namespace & Follower namespaces
  oc adm policy add-role-to-user system:registry $FOLLOWER_ADMIN_USERNAME
  oc adm policy add-role-to-user system:image-builder $FOLLOWER_ADMIN_USERNAME
  oc adm policy add-role-to-user admin $FOLLOWER_ADMIN_USERNAME -n default
  oc adm policy add-role-to-user admin $FOLLOWER_ADMIN_USERNAME -n $CONJUR_NAMESPACE_NAME
}

###################################
registry_login() {
  if [[ "${PLATFORM}" = "openshift" ]]; then
    docker login -u _ -p $(oc whoami -t) $DOCKER_REGISTRY_URL
  else
    if ! [ "${DOCKER_EMAIL}" = "" ]; then
      $CLI delete --ignore-not-found secret dockerpullsecret
      $CLI create secret docker-registry dockerpullsecret \
           --docker-server=$DOCKER_REGISTRY_URL \
           --docker-username=$DOCKER_USERNAME \
           --docker-password=$DOCKER_PASSWORD \
           --docker-email=$DOCKER_EMAIL
    fi
  fi
}

###################################
# Tags & pushes appliance and seed-fetcher images
#
prepare_docker_images() {
  announce "Tagging and pushing Conjur appliance & seed-fetcher images..."
  conjur_appliance_image=$(repo_image_tag conjur-appliance $CONJUR_NAMESPACE_NAME)
  docker tag $CONJUR_APPLIANCE_IMAGE $conjur_appliance_image

  registry_login
  docker push $conjur_appliance_image

  if $CONNECTED; then
    announce "Building and pushing seed-fetcher image."
    pushd build/seed-fetcher
      ./build.sh
    popd
  fi
  seed_fetcher_image_tag=$(repo_image_tag seed-fetcher $CONJUR_NAMESPACE_NAME)
  docker tag $SEED_FETCHER_IMAGE $seed_fetcher_image_tag
  docker push $seed_fetcher_image_tag
}

###################################
initialize_conjur_config_map() {
  echo "Creating Conjur config map." 

  $CLI delete --ignore-not-found=true -n default configmap $CONJUR_CONFIG_MAP

  # get cert and echo to file for later use
  master_cert="$(./get_cert_REST.sh $CONJUR_MASTER_HOST_NAME $CONJUR_MASTER_PORT)"
  echo "$master_cert" > $MASTER_CERT_FILE

  # Set Conjur Master URL to docker host & port
  master_url="https://$CONJUR_MASTER_HOST_NAME:$CONJUR_MASTER_PORT"
  conjur_seed_file_url=$master_url/configuration/$CONJUR_ACCOUNT/seed/follower

  $CLI create configmap $CONJUR_CONFIG_MAP \
	-n default \
        --from-literal=follower-namespace-name="$CONJUR_NAMESPACE_NAME" \
        --from-literal=conjur-master-url=$master_url                    \
        --from-literal=master-certificate="$master_cert"                \
        --from-literal=conjur-seed-file-url="$conjur_seed_file_url"     \
        --from-literal=conjur-authn-login-cluster="$CONJUR_CLUSTER_LOGIN" \
        --from-literal=conjur-account="$CONJUR_ACCOUNT"                 \
        --from-literal=conjur-version="$CONJUR_VERSION"                 \
        --from-literal=conjur-authenticators="$CONJUR_AUTHENTICATORS"   \
        --from-literal=authenticator-id="$AUTHENTICATOR_ID"             \
        --from-literal=conjur-authn-token-file="/run/conjur/access-token"

  echo "Conjur config map created."
}

###################################
initialize_variables() {
  echo "Initializing variables..."

  # Use a cap-D for decoding on Macs
  if [[ "$(uname -s)" == "Linux" ]]; then
    BASE64D="base64 -d"
  else
    BASE64D="base64 -D"
  fi

  TOKEN_SECRET_NAME="$($CLI get secrets -n $CONJUR_NAMESPACE_NAME \
    | grep "${CONJUR_SERVICEACCOUNT_NAME}.*service-account-token" \
    | head -n1 \
    | awk '{print $1}')"

  echo "Initializing cluster ca cert..."
  ./var_value_add_REST.sh \
    conjur/authn-k8s/$AUTHENTICATOR_ID/kubernetes/ca-cert \
    "$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r '.data["ca.crt"]' \
      | $BASE64D)"

  echo "Initializing service-account token..."
  ./var_value_add_REST.sh \
    conjur/authn-k8s/$AUTHENTICATOR_ID/kubernetes/service-account-token \
    "$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r .data.token \
      | $BASE64D)"

  echo "Initializing cluster API URL..."
  ./var_value_add_REST.sh \
    conjur/authn-k8s/$AUTHENTICATOR_ID/kubernetes/api-url \
    "$($CLI config view --minify -o yaml | grep server | awk '{print $2}')"

  echo "Variables initialized."
}

###################################
#
deploy_conjur_followers() {
  announce "Deploying Conjur Followers..."
  registry_login
  copy_conjur_config_map
  deploy_follower_pods
  re_create_conjur_config_map
  echo "Followers created."
}

###########################
# Get copy of conjur configmap from default namespace
copy_conjur_config_map() {
  $CLI delete --ignore-not-found cm $CONJUR_CONFIG_MAP -n $CONJUR_NAMESPACE_NAME
  $CLI get cm $CONJUR_CONFIG_MAP -n default -o yaml \
    | sed "s/namespace: default/namespace: $CONJUR_NAMESPACE_NAME/" \
    | $CLI create -f -
}

###########################
deploy_follower_pods() {

  conjur_appliance_image=$(repo_image_tag "conjur-appliance" "$CONJUR_NAMESPACE_NAME")
  seed_fetcher_image=$(repo_image_tag "seed-fetcher" "$CONJUR_NAMESPACE_NAME") 

  sed -e "s#{{ CONJUR_APPLIANCE_IMAGE }}#$conjur_appliance_image#g" \
     "./manifests/templates/conjur-follower.template.yaml" |
    sed -e "s#{{ AUTHENTICATOR_ID }}#$AUTHENTICATOR_ID#g" |
    sed -e "s#{{ IMAGE_PULL_POLICY }}#$IMAGE_PULL_POLICY#g" |
    sed -e "s#{{ CONJUR_MASTER_HOST_NAME }}#$CONJUR_MASTER_HOST_NAME#g" |
    sed -e "s#{{ CONJUR_MASTER_HOST_IP }}#$CONJUR_MASTER_HOST_IP#g" |
    sed -e "s#{{ CONJUR_MASTER_PORT }}#$CONJUR_MASTER_PORT#g" |
    sed -e "s#{{ CONJUR_SERVICEACCOUNT_NAME }}#$CONJUR_SERVICEACCOUNT_NAME#g" |
    sed -e "s#{{ CONJUR_SEED_FETCHER_IMAGE }}#$seed_fetcher_image#g" |
    sed -e "s#{{ CONJUR_CONFIG_MAP }}#$CONJUR_CONFIG_MAP#g" |
    sed -e "s#{{ CONJUR_FOLLOWER_COUNT }}#${CONJUR_FOLLOWER_COUNT}#g" \
    > ./manifests/conjur-follower-$CONJUR_NAMESPACE_NAME.yaml
    $CLI apply -n $CONJUR_NAMESPACE_NAME -f ./manifests/conjur-follower-$CONJUR_NAMESPACE_NAME.yaml
}

###################################
# Adds follower url & cert to Conjur config map
#
re_create_conjur_config_map() {
  # Wait for Follower to initialize
  echo "Waiting until Follower is ready (about 40 secs)."
  follower_pod_name=$($CLI get pods -n $CONJUR_NAMESPACE_NAME | grep conjur-follower | tail -1 | awk '{print $1}')
  while [[ 'True' != $($CLI get po "$follower_pod_name" -n $CONJUR_NAMESPACE_NAME -o 'jsonpath={.status.conditions[?(@.type=="Ready")].status}') ]]; do
    echo -n "."; sleep 3
  done
  echo ""

  echo "Re-creating Conjur config map w/ Follower URL & cert."
  $CLI delete --ignore-not-found=true -n default configmap $CONJUR_CONFIG_MAP

  # Get cached master cert from file
  master_cert=$(cat "$MASTER_CERT_FILE")

  # cache Follower cert in file for later use
  follower_cert="$($CLI exec -n $CONJUR_NAMESPACE_NAME $follower_pod_name -- cat /opt/conjur/etc/ssl/conjur.pem)"
  echo "$follower_cert" > $FOLLOWER_CERT_FILE

  master_url="https://$CONJUR_MASTER_HOST_NAME:$CONJUR_MASTER_PORT"
  conjur_seed_file_url=$master_url/configuration/$CONJUR_ACCOUNT/seed/follower
  follower_url="https://$CONJUR_FOLLOWER_SERVICE_NAME"

  # Create config map w/ master & follower service endpoint details
  $CLI create configmap $CONJUR_CONFIG_MAP \
	-n default \
	--from-literal=follower-namespace-name="$CONJUR_NAMESPACE_NAME" \
        --from-literal=conjur-master-url=$master_url 			\
	--from-literal=master-certificate="$master_cert" 		\
        --from-literal=conjur-seed-file-url="$conjur_seed_file_url" 	\
        --from-literal=conjur-follower-url=$follower_url 		\
	--from-literal=follower-certificate="$follower_cert" 		\
        --from-literal=conjur-authn-login-cluster="$CONJUR_CLUSTER_LOGIN" \
        --from-literal=conjur-account="$CONJUR_ACCOUNT" 		\
        --from-literal=conjur-version="$CONJUR_VERSION" 		\
        --from-literal=conjur-authenticators="$CONJUR_AUTHENTICATORS" 	\
        --from-literal=authenticator-id="$AUTHENTICATOR_ID" 		\
        --from-literal=conjur-authn-token-file="/run/conjur/access-token"

  echo "Conjur config map recreated."
}

main "$@"
