#!/bin/bash
set -euo pipefail

source ../config/dap.config
source ../config/$PLATFORM.config
source ../config/utils.sh

main() {
  check_dependencies

  login_as $CLUSTER_ADMIN_USERNAME
  ./stop
  create_test_app_namespace
  configure_rbac

  login_as $DEVELOPER_USERNAME
  prepare_docker_images
  load_policies
  deploy_test_app
  verify_authentication
}

############################
check_dependencies() {
  check_env_var "CONJUR_VERSION"
  check_env_var "CONJUR_NAMESPACE_NAME"
  check_env_var "TEST_APP_NAMESPACE_NAME"
  check_env_var "DOCKER_REGISTRY_URL"
  check_env_var "CONJUR_ACCOUNT"
  check_env_var "CONJUR_ADMIN_PASSWORD"
  check_env_var "AUTHENTICATOR_ID"
}

###########################
# Login with user parameter
#
login_as() {
  local user=$1
  if [[ "$PLATFORM" == "openshift" ]]; then
    oc login -u $user
  fi
}

############################
create_test_app_namespace() {
  announce "Creating Test App namespace."
  set_namespace default
  if has_namespace "$TEST_APP_NAMESPACE_NAME"; then
    echo "Namespace '$TEST_APP_NAMESPACE_NAME' exists, not going to create it."
  else
    echo "Creating '$TEST_APP_NAMESPACE_NAME' namespace."
    $CLI create namespace $TEST_APP_NAMESPACE_NAME
  fi
  set_namespace $TEST_APP_NAMESPACE_NAME

  $CLI delete --ignore-not-found rolebinding test-app-conjur-authenticator-role-binding-$CONJUR_NAMESPACE_NAME
  sed -e "s#{{ TEST_APP_NAMESPACE_NAME }}#$TEST_APP_NAMESPACE_NAME#g" ./manifests/test-app-conjur-authenticator-role-binding.yml |
    sed -e "s#{{ CONJUR_NAMESPACE_NAME }}#$CONJUR_NAMESPACE_NAME#g" |
    $CLI create -f -
}

###################################
#
#
configure_rbac() {
  if [[ "$PLATFORM" != "openshift" ]]; then
    return
  fi

  echo "Configuring OpenShift developer permissions."
  oc adm policy add-role-to-user system:registry $DEVELOPER_USERNAME
  oc adm policy add-role-to-user system:image-builder $DEVELOPER_USERNAME
  oc adm policy add-role-to-user admin $DEVELOPER_USERNAME -n default
  oc adm policy add-role-to-user admin $DEVELOPER_USERNAME -n $TEST_APP_NAMESPACE_NAME
}

###################################
registry_login() {
  if [[ "${PLATFORM}" = "openshift" ]]; then
    docker login -u _ -p $(oc whoami -t) $DOCKER_REGISTRY_URL
  else
    if ! [ "${DOCKER_EMAIL}" = "" ]; then
      $CLI delete --ignore-not-found secret dockerpullsecret
      $CLI create secret docker-registry dockerpullsecret \
           --docker-server=$DOCKER_REGISTRY_URL \
           --docker-username=$DOCKER_USERNAME \
           --docker-password=$DOCKER_PASSWORD \
           --docker-email=$DOCKER_EMAIL
    fi
  fi
}

############################
prepare_docker_images() {
  announce "Building and pushing test app images."

  registry_login

  # Tag authenticator image with registry/namespace prefix & namespace tag
  authenticator_image_tag=$(repo_image_tag conjur-authn-k8s-client $TEST_APP_NAMESPACE_NAME)
  docker tag $AUTHENTICATOR_CLIENT_IMAGE $authenticator_image_tag
  docker push $authenticator_image_tag

  pushd build
      if $CONNECTED; then
        ./build.sh
      fi

      test_app_image_tag=$(repo_image_tag test-app $TEST_APP_NAMESPACE_NAME) 
      docker tag test-app:latest $test_app_image_tag
      docker push $test_app_image_tag
  popd
}

############################
load_policies() {
  announce "Initializing Conjur authorization policies..."

  sed -e "s#{{ AUTHENTICATOR_ID }}#$AUTHENTICATOR_ID#g" \
    ./policy/templates/project-authn-defs.template.yml |
    sed -e "s#{{ TEST_APP_NAMESPACE_NAME }}#$TEST_APP_NAMESPACE_NAME#g" \
    > ./policy/project-authn-defs.yml

  sed -e "s#{{ AUTHENTICATOR_ID }}#$AUTHENTICATOR_ID#g" \
      ./policy/templates/app-identity-defs.template.yml |
    sed -e "s#{{ TEST_APP_NAMESPACE_NAME }}#$TEST_APP_NAMESPACE_NAME#g" \
    > ./policy/app-identity-defs.yml

  sed -e "s#{{ AUTHENTICATOR_ID }}#$AUTHENTICATOR_ID#g" \
      ./policy/templates/resource-access-grants.template.yml |
    sed -e "s#{{ TEST_APP_NAMESPACE_NAME }}#$TEST_APP_NAMESPACE_NAME#g" \
    > ./policy/resource-access-grants.yml

  POLICY_FILE_LIST="
policy/project-authn-defs.yml
policy/app-identity-defs.yml
policy/resource-access-grants.yml
"

  for i in $POLICY_FILE_LIST; do
    echo "Loading policy file: $i"
    ./load_policy_REST.sh root "./$i"
  done

  # create initial value for variables
  ./var_value_add_REST.sh k8s-secrets/db-username the-db-username
  ./var_value_add_REST.sh k8s-secrets/db-password $(openssl rand -hex 12)

  echo "Conjur policies loaded."
}

############################
deploy_test_app() {
  announce "Deploying test apps for $TEST_APP_NAMESPACE_NAME."
  registry_login
  copy_conjur_config_map
  create_app_config_map

  IMAGE_PULL_POLICY='IfNotPresent'

  deploy_sidecar_app
  deploy_init_container_app
  sleep 15  # allow time for containers to initialize
}

###########################
# create copy of conjur config map in the app namespace
copy_conjur_config_map() {
  $CLI delete --ignore-not-found cm $CONJUR_CONFIG_MAP -n $TEST_APP_NAMESPACE_NAME
  $CLI get cm $CONJUR_CONFIG_MAP -n default -o yaml \
    | sed "s/namespace: default/namespace: $TEST_APP_NAMESPACE_NAME/" \
    | $CLI create -f -
}

###########################
# APP_CONFIG_MAP defines values for app authentication
#
create_app_config_map() {
  $CLI delete --ignore-not-found configmap $APP_CONFIG_MAP -n $TEST_APP_NAMESPACE_NAME
  
  # Set authn URL to either Follower service in cluster or external Follower
  if $CONJUR_FOLLOWERS_IN_CLUSTER; then
    conjur_appliance_url=https://conjur-follower.$CONJUR_NAMESPACE_NAME.svc.cluster.local/api
  else
    conjur_appliance_url=https://$CONJUR_MASTER_HOST_NAME:$CONJUR_FOLLOWER_PORT
  fi

  conjur_authenticator_url=$conjur_appliance_url/authn-k8s/$AUTHENTICATOR_ID
  conjur_authn_login_prefix=host/conjur/authn-k8s/$AUTHENTICATOR_ID/apps/$TEST_APP_NAMESPACE_NAME/service_account

  $CLI create configmap $APP_CONFIG_MAP \
        -n $TEST_APP_NAMESPACE_NAME \
        --from-literal=conjur-authn-url="$conjur_authenticator_url" \
        --from-literal=conjur-authn-login-init="$conjur_authn_login_prefix/test-app-summon-init" \
        --from-literal=conjur-authn-login-sidecar="$conjur_authn_login_prefix/test-app-summon-sidecar"
}

###########################
deploy_sidecar_app() {
  $CLI delete --ignore-not-found \
    deployment/test-app-summon-sidecar \
    service/test-app-summon-sidecar \
    serviceaccount/test-app-summon-sidecar \
    serviceaccount/oc-test-app-summon-sidecar

  sleep 5

  test_app_image=$(repo_image_tag test-app $TEST_APP_NAMESPACE_NAME) 
  authenticator_client_image=$(repo_image_tag conjur-authn-k8s-client $TEST_APP_NAMESPACE_NAME)

  sed -e "s#{{ TEST_APP_DOCKER_IMAGE }}#$test_app_image#g" \
      ./manifests/templates/test-app-summon-sidecar.template.yml |
    sed -e "s#{{ AUTHENTICATOR_CLIENT_IMAGE }}#$authenticator_client_image#g" |
    sed -e "s#{{ IMAGE_PULL_POLICY }}#$IMAGE_PULL_POLICY#g" |
    sed -e "s#{{ CONJUR_MASTER_HOST_NAME }}#$CONJUR_MASTER_HOST_NAME#g" |
    sed -e "s#{{ CONJUR_MASTER_HOST_IP }}#$CONJUR_MASTER_HOST_IP#g" |
    sed -e "s#{{ TEST_APP_NAMESPACE_NAME }}#$TEST_APP_NAMESPACE_NAME#g" |
    sed -e "s#{{ CONJUR_CONFIG_MAP }}#$CONJUR_CONFIG_MAP#g" |
    sed -e "s#{{ APP_CONFIG_MAP }}#$APP_CONFIG_MAP#g" \
    > ./manifests/test-app-summon-sidecar-$TEST_APP_NAMESPACE_NAME.yml
    $CLI create -f ./manifests/test-app-summon-sidecar-$TEST_APP_NAMESPACE_NAME.yml

  echo "Test app/sidecar deployed."
}

###########################
deploy_init_container_app() {
  $CLI delete --ignore-not-found \
    deployment/test-app-summon-init \
    service/test-app-summon-init \
    serviceaccount/test-app-summon-init \
    serviceaccount/oc-test-app-summon-init

  sleep 5

  test_app_image=$(repo_image_tag test-app $TEST_APP_NAMESPACE_NAME) 
  authenticator_client_image=$(repo_image_tag conjur-authn-k8s-client $TEST_APP_NAMESPACE_NAME)

  sed -e "s#{{ TEST_APP_DOCKER_IMAGE }}#$test_app_image#g" \
      ./manifests/templates/test-app-summon-init.template.yml |
    sed -e "s#{{ AUTHENTICATOR_CLIENT_IMAGE }}#$authenticator_client_image#g" |
    sed -e "s#{{ IMAGE_PULL_POLICY }}#$IMAGE_PULL_POLICY#g" |
    sed -e "s#{{ CONJUR_MASTER_HOST_NAME }}#$CONJUR_MASTER_HOST_NAME#g" |
    sed -e "s#{{ CONJUR_MASTER_HOST_IP }}#$CONJUR_MASTER_HOST_IP#g" |
    sed -e "s#{{ TEST_APP_NAMESPACE_NAME }}#$TEST_APP_NAMESPACE_NAME#g" |
    sed -e "s#{{ CONJUR_CONFIG_MAP }}#$CONJUR_CONFIG_MAP#g" |
    sed -e "s#{{ APP_CONFIG_MAP }}#$APP_CONFIG_MAP#g" \
    > ./manifests/test-app-summon-init-$TEST_APP_NAMESPACE_NAME.yml
    $CLI create -f ./manifests/test-app-summon-init-$TEST_APP_NAMESPACE_NAME.yml

  echo "Test app/init-container deployed."
}

###########################
verify_authentication() {
  clear
  announce "Retrieving secrets with access token."

  sidecar_api_pod=$($CLI get pods --no-headers -l app=test-app-summon-sidecar | awk '{ print $1 }')
  if [[ "$sidecar_api_pod" != "" ]]; then
    echo "Sidecar + REST API: $($CLI exec -c test-app $sidecar_api_pod -- /webapp.sh)"
    echo "Sidecar + Summon:"
    echo "$($CLI exec -c test-app $sidecar_api_pod -- summon /webapp_summon.sh)"
  fi

  init_api_pod=$($CLI get pods --no-headers -l app=test-app-summon-init | awk '{ print $1 }')
  if [[ "$init_api_pod" != "" ]]; then
    echo
    echo "Init Container + REST API: $($CLI exec -c test-app $init_api_pod -- /webapp.sh)"
    echo "Init Container + Summon:"
    echo "$($CLI exec -c test-app $init_api_pod -- summon /webapp_summon.sh)"
  fi
}

main "$@"
