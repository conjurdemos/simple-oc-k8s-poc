#!/bin/bash

source ../config/dap.config
source ../config/$PLATFORM.config
source ../config/utils.sh

# This script initializes the k8s cluster for app authentication
# to a DAP Follower running outside the cluster.

#################
main() {
  apply_manifest
  verify_k8s_api_access
  initialize_variables
  initialize_config_map
}

###################################
apply_manifest() {
  echo "Applying manifest in cluster..."

  sed -e "s#{{ CONJUR_NAMESPACE_NAME }}#$CONJUR_NAMESPACE_NAME#g"   \
     ./manifests/templates/conjur-follower-authn.template.yaml 	    |
    sed -e "s#{{ CONJUR_SERVICEACCOUNT_NAME }}#$CONJUR_SERVICEACCOUNT_NAME#g" \
    > ./manifests/conjur-follower-authn-$CONJUR_NAMESPACE_NAME.yaml
  $CLI apply -f ./manifests/conjur-follower-authn-$CONJUR_NAMESPACE_NAME.yaml

  echo "Manifest applied."
}

###################################
# Validates access to K8s API with service account credentials.
#
verify_k8s_api_access() {
  echo "Verifying service account access to K8s API..."
  # Use a cap-D for decoding on Macs
  if [[ "$(uname -s)" == "Linux" ]]; then
    BASE64D="base64 -d"
  else
    BASE64D="base64 -D"
  fi

  TOKEN_SECRET_NAME="$($CLI get secrets -n $CONJUR_NAMESPACE_NAME \
    | grep 'conjur.*service-account-token' \
    | head -n1 \
    | awk '{print $1}')"
  CERT="$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r '.data["ca.crt"]' \
      | $BASE64D)"
  TOKEN="$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r .data.token \
      | $BASE64D)"
  API="$($CLI config view --minify -o yaml | grep server | awk '{print $2}')"

  echo "$CERT" > k8s.crt
  if [[ "$(curl -s --cacert k8s.crt --header "Authorization: Bearer ${TOKEN}" $API/healthz)" == "ok" ]]; then
    echo "Service account access to K8s API verified."
  else
    echo
    echo ">>> Service account access to K8s API NOT verified. <<<"
    echo
    exit -1
  fi
  rm k8s.crt
}

###################################
initialize_variables() {
  echo "Initializing variables..."

  # Use a cap-D for decoding on Macs
  if [[ "$(uname -s)" == "Linux" ]]; then
    BASE64D="base64 -d"
  else
    BASE64D="base64 -D"
  fi

  TOKEN_SECRET_NAME="$($CLI get secrets -n $CONJUR_NAMESPACE_NAME \
    | grep 'conjur.*service-account-token' \
    | head -n1 \
    | awk '{print $1}')"

  echo "Initializing cluster ca cert..."
  ./var_value_add_REST.sh \
    conjur/authn-k8s/$AUTHENTICATOR_ID/kubernetes/ca-cert \
    "$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r '.data["ca.crt"]' \
      | $BASE64D)"

  echo "Initializing service-account token..."
  ./var_value_add_REST.sh \
    conjur/authn-k8s/$AUTHENTICATOR_ID/kubernetes/service-account-token \
    "$($CLI get secret -n $CONJUR_NAMESPACE_NAME $TOKEN_SECRET_NAME -o json \
      | jq -r .data.token \
      | $BASE64D)"

  echo "Initializing cluster API URL..."
  ./var_value_add_REST.sh \
    conjur/authn-k8s/$AUTHENTICATOR_ID/kubernetes/api-url \
    "$($CLI config view --minify -o yaml | grep server | awk '{print $2}')"

  echo "Variables initialized."
}

###################################
initialize_config_map() {
  $CLI delete --ignore-not-found=true -n default configmap $CONJUR_CONFIG_MAP

  master_url="https://$CONJUR_MASTER_HOST_NAME:$CONJUR_MASTER_PORT"
  master_cert=$(cat "$MASTER_CERT_FILE")
  follower_url="https://$CONJUR_FOLLOWER_SERVICE_NAME"
  follower_cert="$(cat $FOLLOWER_CERT_FILE)"

  $CLI create configmap $CONJUR_CONFIG_MAP \
        -n default \
        --from-literal=follower-namespace-name="" \
        --from-literal=conjur-master-url=$master_url                    \
        --from-literal=master-certificate="$master_cert"                \
        --from-literal=conjur-seed-file-url=""				\
        --from-literal=conjur-follower-url=$follower_url                \
        --from-literal=follower-certificate="$follower_cert"            \
        --from-literal=conjur-authn-login-cluster="$CONJUR_CLUSTER_LOGIN" \
        --from-literal=conjur-account="$CONJUR_ACCOUNT"                 \
        --from-literal=conjur-version="$CONJUR_VERSION"                 \
        --from-literal=conjur-authenticators="$CONJUR_AUTHENTICATORS"   \
        --from-literal=authenticator-id="$AUTHENTICATOR_ID"             \
        --from-literal=conjur-authn-token-file="/run/conjur/access-token"

  echo "Conjur config map recreated."

}

main "$@"

