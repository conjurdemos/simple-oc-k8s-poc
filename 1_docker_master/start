#!/bin/bash

source ../config/dap.config
source ../config/$PLATFORM.config

# This script deletes running instances and brings up 
#   initialized Conjur Master, Follower & CLI nodes.
#   It loads a simple demo policy and leaves the user
#   logged into the CLI as the admin user.

#################
main() {
  ./stop
  while [[ "$(docker ps -a | grep $CONJUR_MASTER_CONTAINER_NAME)" != "" ]]; do
    echo -n '.'
    sleep 3
  done
#  configure_networking
  master_up
  cli_up
  init_follower_authn
  follower_up
  load_demo_policy
  ./exec-into-cli.sh
}

#################
configure_networking() {
  # enable IPV4 port forwarding
  sysctl -w net.ipv4.ip_forward=1
  # update local firewall rules to allow container-container connections
  firewall-cmd --permanent --zone=public --add-rich-rule='rule family=ipv4 source address=172.17.0.0/16 accept'
  firewall-cmd --reload
}

#################
master_up() {
  # Bring up Conjur Master node
  docker run -d \
    --name $CONJUR_MASTER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_MASTER_PORT:443" \
    -p "$CONJUR_MASTER_PGSYNC_PORT:5432" \
    -p "$CONJUR_MASTER_PGAUDIT_PORT:1999" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE 

  # Configure Conjur Master node
  echo "Configuring Conjur master..."
  docker exec $CONJUR_MASTER_CONTAINER_NAME \
                evoke configure master     \
                -h $CONJUR_MASTER_HOST_NAME \
                -p $CONJUR_ADMIN_PASSWORD \
		--master-altnames "$MASTER_ALTNAMES" \
		--follower-altnames "$FOLLOWER_ALTNAMES" \
                $CONJUR_ACCOUNT

  mkdir -p $CACHE_DIR
  echo "Caching Conjur master cert ..."
  rm -f $MASTER_CERT_FILE $FOLLOWER_CERT_FILE
  docker cp -L $CONJUR_MASTER_CONTAINER_NAME:/opt/conjur/etc/ssl/conjur.pem $MASTER_CERT_FILE

  echo "Caching Conjur Follower seed files..."
  rm -f $FOLLOWER_SEED_FILE
  docker exec $CONJUR_MASTER_CONTAINER_NAME evoke seed follower conjur-follower > $FOLLOWER_SEED_FILE
}

#################
cli_up() {
  docker run -d \
    --name $CLI_CONTAINER_NAME \
    --label role=cli \
    --restart always \
    --security-opt seccomp:unconfined \
    --add-host "$CONJUR_MASTER_HOST_NAME:$CONJUR_MASTER_HOST_IP" \
    --entrypoint sh \
    $CLI_IMAGE_NAME \
    -c "sleep infinity"

  # Initialize connection to service (create .conjurrc and conjur-xx.pem cert)
  docker exec $CLI_CONTAINER_NAME \
    bash -c "echo yes | conjur init -u $CONJUR_APPLIANCE_URL -a $CONJUR_ACCOUNT"

  # Login as admin
  docker exec $CLI_CONTAINER_NAME \
    conjur authn login -u admin -p $CONJUR_ADMIN_PASSWORD
}

############################
init_follower_authn() {
 load_policies
 initialize_ca
 whitelist_authenticators
 wait_till_master_is_responsive
}

###################################
load_policies() {
  echo "Initializing Conjur authorization policies..."

  sed -e "s#{{ AUTHENTICATOR_ID }}#$AUTHENTICATOR_ID#g" \
     ./policy/templates/cluster-authn-defs.template.yml |
    sed -e "s#{{ CONJUR_NAMESPACE_NAME }}#$CONJUR_NAMESPACE_NAME#g" |
    sed -e "s#{{ CONJUR_SERVICEACCOUNT_NAME }}#$CONJUR_SERVICEACCOUNT_NAME#g" \
    > ./policy/cluster-authn-defs.yml

  sed -e "s#{{ AUTHENTICATOR_ID }}#$AUTHENTICATOR_ID#g" \
    ./policy/templates/seed-service.template.yml |
    sed -e "s#{{ CONJUR_NAMESPACE_NAME }}#$CONJUR_NAMESPACE_NAME#g" |
    sed -e "s#{{ CONJUR_SERVICEACCOUNT_NAME }}#$CONJUR_SERVICEACCOUNT_NAME#g" \
    > ./policy/seed-service.yml

  POLICY_FILE_LIST="
  ./policy/cluster-authn-defs.yml
  ./policy/seed-service.yml
  "
  for i in $POLICY_FILE_LIST; do
        echo "Loading policy file: $i"
        ./load_policy_REST.sh root "$i"
  done

  echo "Conjur policies loaded."
}

###################################
initialize_ca() {
  echo "Initializing CA in Conjur Master..."

  docker exec $CONJUR_MASTER_CONTAINER_NAME \
    chpst -u conjur conjur-plugin-service possum \
      rake authn_k8s:ca_init["conjur/authn-k8s/$AUTHENTICATOR_ID"]

  echo "CA initialized."
}

###################################
whitelist_authenticators() {
  echo "Updating list of whitelisted authenticators..."

  docker exec $CONJUR_MASTER_CONTAINER_NAME bash -c \
    "echo CONJUR_AUTHENTICATORS=\"authn,authn-k8s/$AUTHENTICATOR_ID\" >> \
      /opt/conjur/etc/conjur.conf && \
        sv restart conjur"

  echo "Authenticators updated."
}

############################
follower_up() {
  # Bring up Conjur Follower node
  docker run -d \
    --name $CONJUR_FOLLOWER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_FOLLOWER_PORT:443" \
    -e "CONJUR_AUTHENTICATORS=$CONJUR_AUTHENTICATORS" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE

  if $NO_DNS; then
    # add entry to follower's /etc/hosts so $CONJUR_MASTER_HOST_NAME resolves
    docker exec -it $CONJUR_FOLLOWER_CONTAINER_NAME \
	bash -c "echo \"$CONJUR_MASTER_HOST_IP $CONJUR_MASTER_HOST_NAME\" >> /etc/hosts"
  fi

  echo "Initializing Conjur Follower"
  docker cp $FOLLOWER_SEED_FILE \
		$CONJUR_FOLLOWER_CONTAINER_NAME:/tmp/follower-seed.tar
  docker exec $CONJUR_FOLLOWER_CONTAINER_NAME \
		evoke unpack seed /tmp/follower-seed.tar
  docker exec $CONJUR_FOLLOWER_CONTAINER_NAME \
		evoke configure follower -p $CONJUR_MASTER_PORT

  echo "Caching Conjur follower cert ..."
  rm -f $FOLLOWER_CERT_FILE
  docker cp -L $CONJUR_FOLLOWER_CONTAINER_NAME:/opt/conjur/etc/ssl/conjur-follower.pem $FOLLOWER_CERT_FILE
}

############################
load_demo_policy() {
  # Laod policy & init variables
  ./load_policy_REST.sh root ./policy/demo-policy.yml
  ./var_value_add_REST.sh secrets/db-username "This-is-the-DB-username"
  ./var_value_add_REST.sh secrets/db-password $(openssl rand -hex 12)
}

############################
wait_till_master_is_responsive() {
  set +e
  master_is_healthy=""
  while [[ "$master_is_healthy" == "" ]]; do
    sleep 2
    master_is_healthy=$(docker exec -it conjur-cli curl -k $CONJUR_APPLIANCE_URL/health | grep "ok" | tail -1 | grep "true")
  done
  set -e
}

main "$@"
